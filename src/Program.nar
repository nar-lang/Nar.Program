module Nar.Program

type Program[flags, model, msg, view]
  = hidden Program(Lifecycle[flags, model, msg, view])

alias Lifecycle[flags, model, msg, view] =
  { flags: flags
  , init: (flags): ( model, List[Cmd[msg]] )
  , view: (model): view
  , present: (view): ()
  , update: (msg, model): ( model, List[Cmd[msg]] )
  , subscribe: (model): List[Sub[msg]]
  }

def application(lifecycle: Lifecycle[flags, model, msg, view]): Program[flags, model, msg, view] =
  Program(lifecycle)

def native exit(code: Int): Cmd[msg]
